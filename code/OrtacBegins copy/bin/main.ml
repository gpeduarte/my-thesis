(* This file is generated by ortac qcheck-stm,
   edit how you run the tool instead *)
[@@@ocaml.warning "-26-27-69-32-38"]
open OrtacBegins.Lib
module Ortac_runtime = Ortac_runtime_qcheck_stm
module SUT =
  (Ortac_runtime.SUT.Make)(struct
                             type sut = char t
                             let init () = make 16 'a'
                           end)
module ModelElt =
  struct
    type nonrec elt = {
      size: int ;
      contents: char list }
    let init =
      let i = 16
      and a_1 = 'a' in
      {
        size =
          (try i
           with
           | e ->
               raise
                 (Ortac_runtime.Partial_function
                    (e,
                      {
                        Ortac_runtime.start =
                          {
                            pos_fname = "lib.mli";
                            pos_lnum = 8;
                            pos_bol = 252;
                            pos_cnum = 273
                          };
                        Ortac_runtime.stop =
                          {
                            pos_fname = "lib.mli";
                            pos_lnum = 8;
                            pos_bol = 252;
                            pos_cnum = 274
                          }
                      })));
        contents =
          (try
             Ortac_runtime.Gospelstdlib.List.init
               (Ortac_runtime.Gospelstdlib.integer_of_int i) (fun j -> a_1)
           with
           | e ->
               raise
                 (Ortac_runtime.Partial_function
                    (e,
                      {
                        Ortac_runtime.start =
                          {
                            pos_fname = "lib.mli";
                            pos_lnum = 9;
                            pos_bol = 275;
                            pos_cnum = 300
                          };
                        Ortac_runtime.stop =
                          {
                            pos_fname = "lib.mli";
                            pos_lnum = 9;
                            pos_bol = 275;
                            pos_cnum = 324
                          }
                      })))
      }
  end
module Model = (Ortac_runtime.Model.Make)(ModelElt)
module Spec =
  struct
    open STM
    type _ ty +=  
      | Integer: Ortac_runtime.integer ty 
    let integer = (Integer, Ortac_runtime.string_of_integer)
    type _ ty +=  
      | SUT: SUT.elt ty 
    let sut = (SUT, (fun _ -> "<sut>"))
    type sut = SUT.t
    let init_sut = SUT.create 1
    type state = Model.t
    let init_state = Model.create 1 ()
    type cmd =
      | Make of int * char 
      | Get of int 
      | Set of int * char 
    let show_cmd cmd__001_ =
      match cmd__001_ with
      | Make (i, a_1) ->
          Format.asprintf "protect (fun () -> %s %a %a)" "make"
            (Util.Pp.pp_int true) i (Util.Pp.pp_char true) a_1
      | Get i_1 ->
          Format.asprintf "protect (fun () -> %s <sut> %a)" "get"
            (Util.Pp.pp_int true) i_1
      | Set (i_2, a_2) ->
          Format.asprintf "protect (fun () -> %s <sut> %a %a)" "set"
            (Util.Pp.pp_int true) i_2 (Util.Pp.pp_char true) a_2
    let cleanup _ = ()
    let arb_cmd _ =
      let open QCheck in
        make ~print:show_cmd
          (let open Gen in
             oneof
               [((pure (fun i -> fun a_1 -> Make (i, a_1))) <*>
                   small_signed_int)
                  <*> char;
               (pure (fun i_1 -> Get i_1)) <*> int;
               ((pure (fun i_2 -> fun a_2 -> Set (i_2, a_2))) <*> int) <*>
                 char])
    let next_state cmd__002_ state__003_ =
      match cmd__002_ with
      | Make (i, a_1) ->
          if
            (try
               Ortac_runtime.Gospelstdlib.(>=)
                 (Ortac_runtime.Gospelstdlib.integer_of_int i)
                 (Ortac_runtime.Gospelstdlib.integer_of_int 0)
             with
             | e ->
                 raise
                   (Ortac_runtime.Partial_function
                      (e,
                        {
                          Ortac_runtime.start =
                            {
                              pos_fname = "lib.mli";
                              pos_lnum = 7;
                              pos_bol = 234;
                              pos_cnum = 245
                            };
                          Ortac_runtime.stop =
                            {
                              pos_fname = "lib.mli";
                              pos_lnum = 7;
                              pos_bol = 234;
                              pos_cnum = 251
                            }
                        })))
          then
            let t_1__005_ =
              let open ModelElt in
                {
                  size =
                    (try i
                     with
                     | e ->
                         raise
                           (Ortac_runtime.Partial_function
                              (e,
                                {
                                  Ortac_runtime.start =
                                    {
                                      pos_fname = "lib.mli";
                                      pos_lnum = 8;
                                      pos_bol = 252;
                                      pos_cnum = 273
                                    };
                                  Ortac_runtime.stop =
                                    {
                                      pos_fname = "lib.mli";
                                      pos_lnum = 8;
                                      pos_bol = 252;
                                      pos_cnum = 274
                                    }
                                })));
                  contents =
                    (try
                       Ortac_runtime.Gospelstdlib.List.init
                         (Ortac_runtime.Gospelstdlib.integer_of_int i)
                         (fun j -> a_1)
                     with
                     | e ->
                         raise
                           (Ortac_runtime.Partial_function
                              (e,
                                {
                                  Ortac_runtime.start =
                                    {
                                      pos_fname = "lib.mli";
                                      pos_lnum = 9;
                                      pos_bol = 275;
                                      pos_cnum = 300
                                    };
                                  Ortac_runtime.stop =
                                    {
                                      pos_fname = "lib.mli";
                                      pos_lnum = 9;
                                      pos_bol = 275;
                                      pos_cnum = 324
                                    }
                                })))
                } in
            Model.push (Model.drop_n state__003_ 0) t_1__005_
          else state__003_
      | Get i_1 ->
          let t_2__006_ = Model.get state__003_ 0 in
          if
            (try
               let __t1__008_ =
                 Ortac_runtime.Gospelstdlib.(<=)
                   (Ortac_runtime.Gospelstdlib.integer_of_int 0)
                   (Ortac_runtime.Gospelstdlib.integer_of_int i_1) in
               let __t2__009_ =
                 Ortac_runtime.Gospelstdlib.(<)
                   (Ortac_runtime.Gospelstdlib.integer_of_int i_1)
                   (Ortac_runtime.Gospelstdlib.integer_of_int t_2__006_.size) in
               __t1__008_ && __t2__009_
             with
             | e ->
                 raise
                   (Ortac_runtime.Partial_function
                      (e,
                        {
                          Ortac_runtime.start =
                            {
                              pos_fname = "lib.mli";
                              pos_lnum = 13;
                              pos_bol = 465;
                              pos_cnum = 476
                            };
                          Ortac_runtime.stop =
                            {
                              pos_fname = "lib.mli";
                              pos_lnum = 13;
                              pos_bol = 465;
                              pos_cnum = 491
                            }
                        })))
          then
            let t_2__007_ = t_2__006_ in
            Model.push (Model.drop_n state__003_ 1) t_2__007_
          else state__003_
      | Set (i_2, a_2) ->
          let t_3__010_ = Model.get state__003_ 0 in
          if
            (try
               let __t1__012_ =
                 Ortac_runtime.Gospelstdlib.(<=)
                   (Ortac_runtime.Gospelstdlib.integer_of_int 0)
                   (Ortac_runtime.Gospelstdlib.integer_of_int i_2) in
               let __t2__013_ =
                 Ortac_runtime.Gospelstdlib.(<)
                   (Ortac_runtime.Gospelstdlib.integer_of_int i_2)
                   (Ortac_runtime.Gospelstdlib.integer_of_int t_3__010_.size) in
               __t1__012_ && __t2__013_
             with
             | e ->
                 raise
                   (Ortac_runtime.Partial_function
                      (e,
                        {
                          Ortac_runtime.start =
                            {
                              pos_fname = "lib.mli";
                              pos_lnum = 18;
                              pos_bol = 665;
                              pos_cnum = 676
                            };
                          Ortac_runtime.stop =
                            {
                              pos_fname = "lib.mli";
                              pos_lnum = 18;
                              pos_bol = 665;
                              pos_cnum = 691
                            }
                        })))
          then
            let t_3__011_ =
              let open ModelElt in
                {
                  t_3__010_ with
                  contents =
                    (try
                       Ortac_runtime.Gospelstdlib.List.mapi
                         (fun j_1 ->
                            fun x ->
                              if
                                j_1 =
                                  (Ortac_runtime.Gospelstdlib.integer_of_int
                                     i_2)
                              then a_2
                              else x) t_3__010_.contents
                     with
                     | e ->
                         raise
                           (Ortac_runtime.Partial_function
                              (e,
                                {
                                  Ortac_runtime.start =
                                    {
                                      pos_fname = "lib.mli";
                                      pos_lnum = 20;
                                      pos_bol = 716;
                                      pos_cnum = 741
                                    };
                                  Ortac_runtime.stop =
                                    {
                                      pos_fname = "lib.mli";
                                      pos_lnum = 20;
                                      pos_bol = 716;
                                      pos_cnum = 815
                                    }
                                })))
                } in
            Model.push (Model.drop_n state__003_ 1) t_3__011_
          else state__003_
    let precond cmd__028_ state__029_ =
      match cmd__028_ with
      | Make (i, a_1) -> true
      | Get i_1 -> true
      | Set (i_2, a_2) -> true
    let postcond _ _ _ = true
    let run cmd__030_ sut__031_ =
      match cmd__030_ with
      | Make (i, a_1) ->
          Res
            ((result sut exn),
              (let res__032_ = protect (fun () -> make i a_1) () in
               ((match res__032_ with
                 | Ok res -> SUT.push sut__031_ res
                 | Error _ -> ());
                res__032_)))
      | Get i_1 ->
          Res
            ((result char exn),
              (let t_2__033_ = SUT.pop sut__031_ in
               let res__034_ = protect (fun () -> get t_2__033_ i_1) () in
               (SUT.push sut__031_ t_2__033_; res__034_)))
      | Set (i_2, a_2) ->
          Res
            ((result unit exn),
              (let t_3__035_ = SUT.pop sut__031_ in
               let res__036_ = protect (fun () -> set t_3__035_ i_2 a_2) () in
               (SUT.push sut__031_ t_3__035_; res__036_)))
  end
module STMTests = (Ortac_runtime.Make)(Spec)
let check_init_state () = ()
let ortac_show_cmd cmd__038_ state__039_ last__041_ res__040_ =
  let open Spec in
    let open STM in
      match (cmd__038_, res__040_) with
      | (Make (i, a_1), Res ((Result (SUT, Exn), _), t_1)) ->
          let lhs =
            if last__041_
            then "r"
            else
              (match t_1 with
               | Ok _ -> "Ok " ^ (SUT.get_name state__039_ 0)
               | Error _ -> "_")
          and shift = match t_1 with | Ok _ -> 1 | Error _ -> 0 in
          Format.asprintf "let %s = protect (fun () -> %s %a %a)" lhs "make"
            (Util.Pp.pp_int true) i (Util.Pp.pp_char true) a_1
      | (Get i_1, Res ((Result (Char, Exn), _), _)) ->
          let lhs = if last__041_ then "r" else "_"
          and shift = 0 in
          Format.asprintf "let %s = protect (fun () -> %s %s %a)" lhs "get"
            (SUT.get_name state__039_ (0 + shift)) (Util.Pp.pp_int true) i_1
      | (Set (i_2, a_2), Res ((Result (Unit, Exn), _), _)) ->
          let lhs = if last__041_ then "r" else "_"
          and shift = 0 in
          Format.asprintf "let %s = protect (fun () -> %s %s %a %a)" lhs
            "set" (SUT.get_name state__039_ (0 + shift))
            (Util.Pp.pp_int true) i_2 (Util.Pp.pp_char true) a_2
      | _ -> assert false
let ortac_postcond cmd__014_ state__015_ res__016_ =
  let open Spec in
    let open STM in
      let new_state__017_ = lazy (next_state cmd__014_ state__015_) in
      match (cmd__014_, res__016_) with
      | (Make (i, a_1), Res ((Result (SUT, Exn), _), t_1)) ->
          (match if
                   try
                     Ortac_runtime.Gospelstdlib.(>=)
                       (Ortac_runtime.Gospelstdlib.integer_of_int i)
                       (Ortac_runtime.Gospelstdlib.integer_of_int 0)
                   with
                   | e ->
                       raise
                         (Ortac_runtime.Partial_function
                            (e,
                              {
                                Ortac_runtime.start =
                                  {
                                    pos_fname = "lib.mli";
                                    pos_lnum = 7;
                                    pos_bol = 234;
                                    pos_cnum = 245
                                  };
                                Ortac_runtime.stop =
                                  {
                                    pos_fname = "lib.mli";
                                    pos_lnum = 7;
                                    pos_bol = 234;
                                    pos_cnum = 251
                                  }
                              }))
                 then None
                 else
                   Some
                     (Ortac_runtime.report "Lib" "make 16 'a'"
                        (Ortac_runtime.Exception "Invalid_argument") "make"
                        [("i >= 0",
                           {
                             Ortac_runtime.start =
                               {
                                 pos_fname = "lib.mli";
                                 pos_lnum = 7;
                                 pos_bol = 234;
                                 pos_cnum = 245
                               };
                             Ortac_runtime.stop =
                               {
                                 pos_fname = "lib.mli";
                                 pos_lnum = 7;
                                 pos_bol = 234;
                                 pos_cnum = 251
                               }
                           })])
           with
           | None -> (match t_1 with | Ok t_1 -> None | _ -> None)
           | _ ->
               (match t_1 with
                | Error (Invalid_argument _) -> None
                | _ ->
                    if
                      (try
                         Ortac_runtime.Gospelstdlib.(>=)
                           (Ortac_runtime.Gospelstdlib.integer_of_int i)
                           (Ortac_runtime.Gospelstdlib.integer_of_int 0)
                       with
                       | e ->
                           raise
                             (Ortac_runtime.Partial_function
                                (e,
                                  {
                                    Ortac_runtime.start =
                                      {
                                        pos_fname = "lib.mli";
                                        pos_lnum = 7;
                                        pos_bol = 234;
                                        pos_cnum = 245
                                      };
                                    Ortac_runtime.stop =
                                      {
                                        pos_fname = "lib.mli";
                                        pos_lnum = 7;
                                        pos_bol = 234;
                                        pos_cnum = 251
                                      }
                                  })))
                    then None
                    else
                      Some
                        (Ortac_runtime.report "Lib" "make 16 'a'"
                           (Ortac_runtime.Exception "Invalid_argument")
                           "make"
                           [("i >= 0",
                              {
                                Ortac_runtime.start =
                                  {
                                    pos_fname = "lib.mli";
                                    pos_lnum = 7;
                                    pos_bol = 234;
                                    pos_cnum = 245
                                  };
                                Ortac_runtime.stop =
                                  {
                                    pos_fname = "lib.mli";
                                    pos_lnum = 7;
                                    pos_bol = 234;
                                    pos_cnum = 251
                                  }
                              })])))
      | (Get i_1, Res ((Result (Char, Exn), _), a_3)) ->
          (match if
                   let tmp__022_ = Model.get state__015_ 0 in
                   try
                     let __t1__023_ =
                       Ortac_runtime.Gospelstdlib.(<=)
                         (Ortac_runtime.Gospelstdlib.integer_of_int 0)
                         (Ortac_runtime.Gospelstdlib.integer_of_int i_1) in
                     let __t2__024_ =
                       Ortac_runtime.Gospelstdlib.(<)
                         (Ortac_runtime.Gospelstdlib.integer_of_int i_1)
                         (Ortac_runtime.Gospelstdlib.integer_of_int
                            tmp__022_.size) in
                     __t1__023_ && __t2__024_
                   with
                   | e ->
                       raise
                         (Ortac_runtime.Partial_function
                            (e,
                              {
                                Ortac_runtime.start =
                                  {
                                    pos_fname = "lib.mli";
                                    pos_lnum = 13;
                                    pos_bol = 465;
                                    pos_cnum = 476
                                  };
                                Ortac_runtime.stop =
                                  {
                                    pos_fname = "lib.mli";
                                    pos_lnum = 13;
                                    pos_bol = 465;
                                    pos_cnum = 491
                                  }
                              }))
                 then None
                 else
                   Some
                     (Ortac_runtime.report "Lib" "make 16 'a'"
                        (Ortac_runtime.Exception "Invalid_argument") "get"
                        [("0 <= i < t.size",
                           {
                             Ortac_runtime.start =
                               {
                                 pos_fname = "lib.mli";
                                 pos_lnum = 13;
                                 pos_bol = 465;
                                 pos_cnum = 476
                               };
                             Ortac_runtime.stop =
                               {
                                 pos_fname = "lib.mli";
                                 pos_lnum = 13;
                                 pos_bol = 465;
                                 pos_cnum = 491
                               }
                           })])
           with
           | None ->
               (match a_3 with
                | Ok a_3 ->
                    if
                      let t_old__020_ = Model.get state__015_ 0
                      and t_new__021_ =
                        lazy (Model.get (Lazy.force new_state__017_) 0) in
                      (try
                         a_3 =
                           (Ortac_runtime.Gospelstdlib.List.nth
                              (Lazy.force t_new__021_).contents
                              (Ortac_runtime.Gospelstdlib.integer_of_int i_1))
                       with
                       | e ->
                           raise
                             (Ortac_runtime.Partial_function
                                (e,
                                  {
                                    Ortac_runtime.start =
                                      {
                                        pos_fname = "lib.mli";
                                        pos_lnum = 14;
                                        pos_bol = 492;
                                        pos_cnum = 504
                                      };
                                    Ortac_runtime.stop =
                                      {
                                        pos_fname = "lib.mli";
                                        pos_lnum = 14;
                                        pos_bol = 492;
                                        pos_cnum = 529
                                      }
                                  })))
                    then None
                    else
                      Some
                        (Ortac_runtime.report "Lib" "make 16 'a'"
                           (Ortac_runtime.Protected_value
                              (Res
                                 (char,
                                   (let t_old__018_ = Model.get state__015_ 0
                                    and t_new__019_ =
                                      lazy
                                        (Model.get
                                           (Lazy.force new_state__017_) 0) in
                                    try
                                      Ortac_runtime.Gospelstdlib.List.nth
                                        (Lazy.force t_new__019_).contents
                                        (Ortac_runtime.Gospelstdlib.integer_of_int
                                           i_1)
                                    with
                                    | e ->
                                        raise
                                          (Ortac_runtime.Partial_function
                                             (e,
                                               {
                                                 Ortac_runtime.start =
                                                   {
                                                     pos_fname = "lib.mli";
                                                     pos_lnum = 14;
                                                     pos_bol = 492;
                                                     pos_cnum = 508
                                                   };
                                                 Ortac_runtime.stop =
                                                   {
                                                     pos_fname = "lib.mli";
                                                     pos_lnum = 14;
                                                     pos_bol = 492;
                                                     pos_cnum = 529
                                                   }
                                               })))))) "get"
                           [("a = List.nth t.contents i",
                              {
                                Ortac_runtime.start =
                                  {
                                    pos_fname = "lib.mli";
                                    pos_lnum = 14;
                                    pos_bol = 492;
                                    pos_cnum = 504
                                  };
                                Ortac_runtime.stop =
                                  {
                                    pos_fname = "lib.mli";
                                    pos_lnum = 14;
                                    pos_bol = 492;
                                    pos_cnum = 529
                                  }
                              })])
                | _ -> None)
           | _ ->
               (match a_3 with
                | Error (Invalid_argument _) -> None
                | _ ->
                    if
                      let tmp__022_ = Model.get state__015_ 0 in
                      (try
                         let __t1__023_ =
                           Ortac_runtime.Gospelstdlib.(<=)
                             (Ortac_runtime.Gospelstdlib.integer_of_int 0)
                             (Ortac_runtime.Gospelstdlib.integer_of_int i_1) in
                         let __t2__024_ =
                           Ortac_runtime.Gospelstdlib.(<)
                             (Ortac_runtime.Gospelstdlib.integer_of_int i_1)
                             (Ortac_runtime.Gospelstdlib.integer_of_int
                                tmp__022_.size) in
                         __t1__023_ && __t2__024_
                       with
                       | e ->
                           raise
                             (Ortac_runtime.Partial_function
                                (e,
                                  {
                                    Ortac_runtime.start =
                                      {
                                        pos_fname = "lib.mli";
                                        pos_lnum = 13;
                                        pos_bol = 465;
                                        pos_cnum = 476
                                      };
                                    Ortac_runtime.stop =
                                      {
                                        pos_fname = "lib.mli";
                                        pos_lnum = 13;
                                        pos_bol = 465;
                                        pos_cnum = 491
                                      }
                                  })))
                    then None
                    else
                      Some
                        (Ortac_runtime.report "Lib" "make 16 'a'"
                           (Ortac_runtime.Exception "Invalid_argument") "get"
                           [("0 <= i < t.size",
                              {
                                Ortac_runtime.start =
                                  {
                                    pos_fname = "lib.mli";
                                    pos_lnum = 13;
                                    pos_bol = 465;
                                    pos_cnum = 476
                                  };
                                Ortac_runtime.stop =
                                  {
                                    pos_fname = "lib.mli";
                                    pos_lnum = 13;
                                    pos_bol = 465;
                                    pos_cnum = 491
                                  }
                              })])))
      | (Set (i_2, a_2), Res ((Result (Unit, Exn), _), res)) ->
          (match if
                   let tmp__025_ = Model.get state__015_ 0 in
                   try
                     let __t1__026_ =
                       Ortac_runtime.Gospelstdlib.(<=)
                         (Ortac_runtime.Gospelstdlib.integer_of_int 0)
                         (Ortac_runtime.Gospelstdlib.integer_of_int i_2) in
                     let __t2__027_ =
                       Ortac_runtime.Gospelstdlib.(<)
                         (Ortac_runtime.Gospelstdlib.integer_of_int i_2)
                         (Ortac_runtime.Gospelstdlib.integer_of_int
                            tmp__025_.size) in
                     __t1__026_ && __t2__027_
                   with
                   | e ->
                       raise
                         (Ortac_runtime.Partial_function
                            (e,
                              {
                                Ortac_runtime.start =
                                  {
                                    pos_fname = "lib.mli";
                                    pos_lnum = 18;
                                    pos_bol = 665;
                                    pos_cnum = 676
                                  };
                                Ortac_runtime.stop =
                                  {
                                    pos_fname = "lib.mli";
                                    pos_lnum = 18;
                                    pos_bol = 665;
                                    pos_cnum = 691
                                  }
                              }))
                 then None
                 else
                   Some
                     (Ortac_runtime.report "Lib" "make 16 'a'"
                        (Ortac_runtime.Exception "Invalid_argument") "set"
                        [("0 <= i < t.size",
                           {
                             Ortac_runtime.start =
                               {
                                 pos_fname = "lib.mli";
                                 pos_lnum = 18;
                                 pos_bol = 665;
                                 pos_cnum = 676
                               };
                             Ortac_runtime.stop =
                               {
                                 pos_fname = "lib.mli";
                                 pos_lnum = 18;
                                 pos_bol = 665;
                                 pos_cnum = 691
                               }
                           })])
           with
           | None -> (match res with | Ok _ -> None | _ -> None)
           | _ ->
               (match res with
                | Error (Invalid_argument _) -> None
                | _ ->
                    if
                      let tmp__025_ = Model.get state__015_ 0 in
                      (try
                         let __t1__026_ =
                           Ortac_runtime.Gospelstdlib.(<=)
                             (Ortac_runtime.Gospelstdlib.integer_of_int 0)
                             (Ortac_runtime.Gospelstdlib.integer_of_int i_2) in
                         let __t2__027_ =
                           Ortac_runtime.Gospelstdlib.(<)
                             (Ortac_runtime.Gospelstdlib.integer_of_int i_2)
                             (Ortac_runtime.Gospelstdlib.integer_of_int
                                tmp__025_.size) in
                         __t1__026_ && __t2__027_
                       with
                       | e ->
                           raise
                             (Ortac_runtime.Partial_function
                                (e,
                                  {
                                    Ortac_runtime.start =
                                      {
                                        pos_fname = "lib.mli";
                                        pos_lnum = 18;
                                        pos_bol = 665;
                                        pos_cnum = 676
                                      };
                                    Ortac_runtime.stop =
                                      {
                                        pos_fname = "lib.mli";
                                        pos_lnum = 18;
                                        pos_bol = 665;
                                        pos_cnum = 691
                                      }
                                  })))
                    then None
                    else
                      Some
                        (Ortac_runtime.report "Lib" "make 16 'a'"
                           (Ortac_runtime.Exception "Invalid_argument") "set"
                           [("0 <= i < t.size",
                              {
                                Ortac_runtime.start =
                                  {
                                    pos_fname = "lib.mli";
                                    pos_lnum = 18;
                                    pos_bol = 665;
                                    pos_cnum = 676
                                  };
                                Ortac_runtime.stop =
                                  {
                                    pos_fname = "lib.mli";
                                    pos_lnum = 18;
                                    pos_bol = 665;
                                    pos_cnum = 691
                                  }
                              })])))
      | _ -> None
let _ =
  QCheck_base_runner.run_tests_main
    (let count = 1000 in
     [STMTests.agree_test ~count ~name:"Lib STM tests" 1 check_init_state
        ortac_show_cmd ortac_postcond])
