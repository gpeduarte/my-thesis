@article{static_dynamic_verification,
   abstract = {We present our work on the collaborative use of dynamic and static analysis tools for the verification of software written in the OCaml language. We build upon Gospel, a specification language for OCaml that can be used both in dynamic and static analyses. We employ Ortac, for runtime assertion checking, and Cameleer and CFML for the deductive verification of OCaml code. We report on the use of such tools to build a case study of collaborative analysis of a non-trivial OCaml program. This shows how these tools nicely complement each others, while at the same highlights the differences when writing specification targeting dynamic or static analysis methods.},
   author = {Tiago Lopes Soares and Ion Chirica and Mário Pereira},
   month = {7},
   title = {Static and Dynamic Verification of OCaml Programs: The Gospel Ecosystem (Extended Version)},
   url = {http://arxiv.org/abs/2407.17289},
   year = {2024},
}
@misc{ortac_runtime_assertion_checking,
   abstract = {Runtime assertion checking (RAC) is a convenient set of techniques that lets developers abstract away the process of verifying the correctness of their programs by writing formal specifications and automating their verification at runtime. In this work, we present ortac, a runtime assertion checking tool for OCaml libraries and programs. OCaml is a functional programming language in which idioms rely on an expressive type system, modules, and interface abstractions. ortac consumes interfaces annotated with type invariants and function contracts and produces code wrappers with the same signature that check these specifications at runtime. It provides a flexible framework for traditional assertion checking, monitoring mis-behaviors without interruptions, and automated fuzz testing for OCaml programs. This paper presents an overview of ortac features and highlights its main design choices.},
   author = {Jean-Christophe Filliâtre and Clément Pascutto},
   keywords = {Assertion,Caml·,Checking· O,Engineer-ing,Runtime,Software},
   title = {Ortac: Runtime Assertion Checking for OCaml (tool paper)},
   url = {https://github.com/ocaml-gospel/ortac.},
}
@inproceedings{pyramid_of_formal_verification,
   abstract = {Over the past few years there has been significant progress in the various fields of software verification resulting in many useful tools and successful deployments, both academic and commercial. However much of the work describing these tools and ideas is written by and for the research community. The scale, diversity and focus of the literature can act as a barrier, separating industrial users and the wider academic community from the tools that could make their work more efficient, more certain and more productive. This tutorial gives a simple classification of verification techniques in terms of a pyramid and uses it to describe the six main schools of verification technologies. We have found this approach valuable for building collaborations with industry as it allows us to explain the intrinsic strengths and weaknesses of techniques and pick the right tool for any given industrial application. The model also highlights some of the cultural differences and unspoken assumptions of different areas of verification and illuminates future directions.},
   author = {Martin Brain and Elizabeth Polgreen},
   doi = {10.1007/978-3-031-71177-0_24},
   isbn = {9783031711763},
   issn = {16113349},
   booktitle = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
   pages = {393-419},
   publisher = {Springer Science and Business Media Deutschland GmbH},
   title = {A Pyramid Of (Formal) Software Verification},
   volume = {14934 LNCS},
   year = {2025},
}
